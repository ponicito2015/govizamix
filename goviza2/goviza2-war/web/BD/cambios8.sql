

CREATE TABLE INVENTARIO_INICIAL_SISTEMA(
ID_INVENTARIO_INICIAL_SISTEMA int(11) NOT NULL AUTO_INCREMENT,
ID_INVENTARIO_FISICO int(11) NOT NULL,
OBERVACIONES VARCHAR(50) NOT NULL DEFAULT "",
FECHA_REGISTRO DATE NOT NULL ,
PRIMARY KEY (ID_INVENTARIO_INICIAL_SISTEMA),
FOREIGN KEY (ID_INVENTARIO_FISICO) REFERENCES INVENTARIO_FISICO (ID_INVENTARIO_FISICO)
)ENGINE=InnoDB;


DELIMITER //
CREATE PROCEDURE RESETEO()
 BEGIN
 
DELETE FROM ORDEN_SALIDA_DETALLE_ALMACEN_PRODUCTOS WHERE ID_ORDEN_SALIDA_DETALLE_ALMACEN_PRODUCTOS_COSTOS > 0;
DELETE FROM DETALLE_ALMACEN_PRODUCTOS WHERE ID_DETALLE_ALMACEN_PRODUCTOS > 0;

/*ALTER TABLE DETALLE_ALMACEN_PRODUCTOS AUTO_INCREMENT = 1;*/

DELETE FROM STOCK_PRODUCTO_TIENDA_ORIGEN WHERE ID_PRODUCTO > 0 and ID_TIENDA_ORIGEN > 0;
DELETE FROM INGRESO_PRODUCTO_TIENDA WHERE ID_INGRESO_PRODUCTO_TIENDA > 0;
DELETE FROM SALIDA_PRODUCTO_TIENDA WHERE ID_SALIDA_PRODUCTO_TIENDA > 0;


 END //
DELIMITER ;














DELIMITER //
CREATE TRIGGER inserta_inventarios_sistema
 AFTER INSERT ON INVENTARIO_INICIAL_SISTEMA
/*
usa este detalle, para que uses el ID_VENTA, a traves de eso vas a poder actualizar un campo
en la venta que se llame : Utilidad y que sea la resta del costo en almacen entre el precio de venta
*/
 FOR EACH ROW
 BEGIN
declare x int(11) default 0;
declare id_ int(11) default 0;


/*
agregado para las salidas en almacen
*/
DECLARE id_cliente  int(11) default 0;
DECLARE id_producto  int(11) default 0;
DECLARE id_ubicacion int(11) default 0;


DECLARE id_deta  int(50);
DECLARE _cant int(10);
DECLARE _resto int(10);
DECLARE _ID_TIENDA  INT(11);
DECLARE err_no_more_records CONDITION FOR 1329;
DECLARE c CURSOR FOR 


select IFS.ID_INVENTARIO_FISICO as ID,T.ID_TIENDA AS TIENDA, UBF.ID_UBICACION_FISICA AS UBICACION
,P.ID_PRODUCTO AS PRODUCTO, SUM(DUFP.CANTIDAD) as CANTIDAD
from INVENTARIO_FISICO IFS
INNER JOIN DETALLE_INVENTARIO_UBICACION_FISICA DIUF
ON IFS.ID_INVENTARIO_FISICO =DIUF.ID_INVENTARIO_FISICO
INNER JOIN DETALLE_UBICACION_FISICA_PRODUCTO DUFP ON
DIUF.ID_DETALLE_INVENTARIO_UBICACION_FISICA =DUFP.ID_DETALLE_INVENTARIO_UBICACION_FISICA
INNER JOIN TIENDA T ON T.ID_TIENDA =IFS.ID_TIENDA
INNER JOIN UBICACION_FISICA UBF ON UBF.ID_UBICACION_FISICA =DIUF.ID_UBICACION_FISICA
INNER JOIN PRODUCTO P ON P.ID_PRODUCTO=DUFP.ID_PRODUCTO
group by IFS.ID_INVENTARIO_FISICO,T.ID_TIENDA,UBF.ID_UBICACION_FISICA,P.ID_PRODUCTO
having IFS.ID_INVENTARIO_FISICO=new.ID_INVENTARIO_FISICO
ORDER BY 4;


DECLARE EXIT HANDLER FOR err_no_more_records





BEGIN
END;

/* TIENES QUE PONER A RESTEO PARA QUE PRIMARY EMPIESE DESDE 1*/
CALL RESETEO();
OPEN c;

SET x = 0;
size: LOOP
FETCH c INTO id_deta,_ID_TIENDA,id_ubicacion,id_producto,_cant;


INSERT INTO DETALLE_ALMACEN_PRODUCTOS (ID_PRODUCTO,COSTO,ID_TIENDA,CANTIDAD,SALIERON
,QUEDARON,FECHA_INGRESO,FECHA_VENCIMIENTO,DESCRIPCION_MOTIVO,
ID_UBICACION_FISICA,ID_PROCEDENCIA_PRODUCTO_ALMACEN,ID_ESTADO_PRODUCTO_COSTO_ALMACEN)
VALUES(id_producto,0,_ID_TIENDA,_cant,0,_cant,CURDATE(),CURDATE(),'',id_ubicacion,1,1); 

/*UPDATE STOCK_PRODUCTO_TIENDA_ORIGEN AS stk
set stk.CANTIDAD = stk.CANTIDAD + _cant
where stk.ID_PRODUCTO = id_producto and stk.ID_TIENDA_ORIGEN = _ID_TIENDA;
*/

INSERT INTO STOCK_PRODUCTO_TIENDA_ORIGEN
(ID_PRODUCTO,ID_TIENDA_ORIGEN,CANTIDAD,ULTIMA_FECHA_INGRESO,DESCRIPCION)
VALUES
(id_producto,_ID_TIENDA,_cant, curdate(),'')
ON DUPLICATE KEY UPDATE
STOCK_PRODUCTO_TIENDA_ORIGEN.CANTIDAD = STOCK_PRODUCTO_TIENDA_ORIGEN.CANTIDAD + _cant;


/* hay que registrar cada ingreso */
INSERT INTO INGRESO_PRODUCTO_TIENDA(ID_TIENDA,ID_PRODUCTO,CANTIDAD,FECHA_INGRESO,FECHA_VENCIMIENTO
,MOTIVO,ID_UBICACION_FISICA,COSTO_UNITARIO) VALUES (_ID_TIENDA,id_producto,_cant,curdate(),curdate(),'INVENTARIO SISTEMA',
id_ubicacion,0);



END LOOP size;
CLOSE c;


END//
DELIMITER ;












drop TRIGGER inserta_venta_rapida;

DELIMITER //
CREATE TRIGGER inserta_venta_rapida
 AFTER INSERT ON DETALLE_VENTA_RAPIDA_PRODUCTO
 FOR EACH ROW
 BEGIN

declare x int(11) default 0;
declare id_ int(11) default 0;

/*
agregado para las salidas en almacen
*/
DECLARE id_cliente  int(11) default 0;
DECLARE desc_ubicacion VARCHAR(370) default '';



DECLARE id_deta  int(50);
DECLARE _cant int(10);
DECLARE _resto int(10);
DECLARE _ID_TIENDA  INT(11);
DECLARE err_no_more_records CONDITION FOR 1329;


DECLARE c CURSOR FOR select dt.ID_DETALLE_ALMACEN_PRODUCTOS, dt.QUEDARON,dt.ID_TIENDA
,UF.NOMBRE_UBICACION_FISICA from DETALLE_ALMACEN_PRODUCTOS dt 
inner join UBICACION_FISICA UF on UF.ID_UBICACION_FISICA = dt.ID_UBICACION_FISICA
where dt.ID_PRODUCTO=new.ID_PRODUCTO and dt.ID_ESTADO_PRODUCTO_COSTO_ALMACEN=1

order by dt.COSTO;

DECLARE EXIT HANDLER FOR err_no_more_records

BEGIN
END;

select distinct v.ID_TIENDA,dt.ID_CLIENTE  into id_,id_cliente from DETALLE_VENTA_RAPIDA_PRODUCTO dt 
inner join VENTA_RAPIDA v
on dt.ID_VENTA_RAPIDA=v.ID_VENTA_RAPIDA where v.ID_VENTA_RAPIDA=NEW.ID_VENTA_RAPIDA;

UPDATE STOCK_PRODUCTO_TIENDA_ORIGEN AS stk
set stk.CANTIDAD = stk.CANTIDAD-NEW.CANTIDAD
where stk.ID_PRODUCTO = new.ID_PRODUCTO and stk.ID_TIENDA_ORIGEN = id_;
/*  TIENES QUE AGERGAR LAS ORDENES DE SALIDA */
/* AGREGAR EL REGISTRO DE DECREMENTO EN EL DETALLE*/

set _resto =new.CANTIDAD;
OPEN c;


SET x = 0;
size: LOOP
FETCH c INTO id_deta,_cant,_ID_TIENDA,desc_ubicacion;

if id_  = _ID_TIENDA and _cant <= _resto then



update DETALLE_ALMACEN_PRODUCTOS set ID_ESTADO_PRODUCTO_COSTO_ALMACEN=2,SALIERON=SALIERON+_cant,QUEDARON=0  
WHERE ID_DETALLE_ALMACEN_PRODUCTOS=id_deta;
/*
agregando la referencia a orden de salida en almacen
*/
insert ORDEN_SALIDA_DETALLE_ALMACEN_PRODUCTOS(ID_DETALLE_ALMACEN_PRODUCTOS,ID_CLIENTE,OBSERVACIONES_UBICACION,
FECHA_REGISTRO,CODIGO_FACTURA_BOLETA,CANTIDAD,ID_ESTADO_ORDEN_SALIDA_DETALLE_ALMACEN_PRODUCTOS)
values (id_deta,id_cliente,desc_ubicacion, NOW(),concat('VR',NEW.ID_DETALLE_VENTA_RAPIDA_PRODUCTO),_cant,1);


set _resto = _resto - _cant;
else

if id_  = _ID_TIENDA then
update DETALLE_ALMACEN_PRODUCTOS set ID_ESTADO_PRODUCTO_COSTO_ALMACEN=1,SALIERON=SALIERON + _resto,QUEDARON=QUEDARON-_resto
WHERE ID_DETALLE_ALMACEN_PRODUCTOS=id_deta;
/*
agregando la referencia a orden de salida en almacen
*/
insert ORDEN_SALIDA_DETALLE_ALMACEN_PRODUCTOS(ID_DETALLE_ALMACEN_PRODUCTOS,ID_CLIENTE,OBSERVACIONES_UBICACION,
FECHA_REGISTRO,CODIGO_FACTURA_BOLETA,CANTIDAD,ID_ESTADO_ORDEN_SALIDA_DETALLE_ALMACEN_PRODUCTOS)
values (id_deta,id_cliente,desc_ubicacion,NOW(),concat('VR',NEW.ID_DETALLE_VENTA_RAPIDA_PRODUCTO),_resto,1);

set _resto=0;
end if;


end if;


  if _resto=0 then
 leave size; 
           
end if;

END LOOP size;
CLOSE c;


END//
DELIMITER ;
















